[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nmap <silent> <C-c><C-n> <Plug>(coc-diagnostic-next-error)
  nmap <silent> <C-c><C-p> <Plug>(coc-diagnostic-prev-error)

  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Remap for rename current word
  nmap <C-c><C-r> <Plug>(coc-rename)
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
  " Use K for show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
  let g:coc_filetype_map  = {
  \ 'htmldjango': 'html',
  \ }
  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " for coc-snippets
  let g:coc_snippet_next = '<TAB>'
'''

hook_post_source = '''
  " for coc-actions
  " Remap for do codeAction of selected region
  function! s:cocActionsOpenFromSelected(type) abort
    execute 'CocCommand actions.open ' . a:type
  endfunction
  xmap <silent> <leader>a :<C-u>execute 'CocCommand actions.open ' . visualmode()<CR>
  nmap <silent> <leader>a :<C-u>set operatorfunc=<SID>cocActionsOpenFromSelected<CR>g@
'''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
autocmd FileType TelescopePrompt let b:lexima_disabled = 1
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  autocmd user indentline doautocmd indentline syntax
'''

[[plugins]]
repo =  'editorconfig/editorconfig-vim'
hook_add = '''
  let g:EditorConfig_verbose=1
'''

[[plugins]]
repo = 'vim-scripts/camelcasemotion'
hook_add = '''
  map w <Plug>CamelCaseMotion_w
  map b <Plug>CamelCaseMotion_b
  map e <Plug>CamelCaseMotion_e
  sunmap w
  sunmap b
  sunmap e
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo='mbbill/undotree'

[[plugins]]
repo='skywind3000/asyncrun.vim'
hook_add = '''
  let g:asyncrun_open = 14
  " autocmd User AsyncRunStop copen | $ | wincmd p
'''

[[plugins]]
repo = 'lambdalisue/readablefold.vim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_add = '''
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set foldlevel=99
'''
hook_post_source = '''
lua <<EOF
  require('nvim-treesitter.configs').setup {
      highlight = {
          enable = true,                    -- false will disable the whole extension
          disable = {  },                   -- list of language that will be disabled
      },
      indent = {
        enable = true
      },
      incremental_selection = {
          enable = true,
          disable = {  },
          keymaps = {                       -- mappings for incremental selection (visual mappings)
            init_selection = 'gnn',         -- maps in normal mode to init the node/scope selection
            node_incremental = "grn",       -- increment to the upper named parent
            scope_incremental = "grc",      -- increment to the upper scope (as defined in locals.scm)
            node_decremental = "grm",       -- decrement to the previous node
          }
      },
      ensure_installed = { "ruby", "go", "javascript", "typescript", "html", "scss", "css", "vim", "vue", "yaml", "comment" } -- one of 'all', 'language', or a list of languages
  }
EOF
'''

[[plugins]]
repo = 'vigoux/treesitter-context.nvim'
depends = ['nvim-treesitter']

[[plugins]]
repo = 'phaazon/hop.nvim'
hook_post_source = '''
  nmap <C-f><C-f> <cmd>HopWord<CR>
'''

[[plugins]]
repo = 'folke/trouble.nvim'
depends = ['telescope.nvim', 'coc.nvim']
hook_add = '''
au User CocDiagnosticChange lua require'trouble'.refresh({auto = true, provider = "loclist"})
nmap <silent> <C-c><C-d> :<C-u>LspTroubleToggle loclist<CR>
'''

[[plugins]]
repo = 'folke/todo-comments.nvim'
hook_post_source = '''
lua << EOF
require("todo-comments").setup {
  -- your configuration comes here
  -- or leave it empty to use the default settings
}
EOF
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
depends = ['plenary.nvim']
hook_add = '''
lua << EOF
require("gitsigns").setup {
  signs = {
    add          = {hl = 'GitSignsAdd'   , text = '‖', numhl='GitSignsAddNr'   , linehl='GitSignsAddLn'},
    change       = {hl = 'GitSignsChange', text = '‖', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
    delete       = {hl = 'GitSignsDelete', text = '_', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
    topdelete    = {hl = 'GitSignsDelete', text = '‾', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
    changedelete = {hl = 'GitSignsChange', text = '~', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
  },
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = true, -- Toggle with `:Gitsigns toggle_word_diff`
}
EOF
'''
