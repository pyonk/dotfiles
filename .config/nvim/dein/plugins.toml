[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nmap <silent> <C-c><C-n> <Plug>(coc-diagnostic-next-error)
  nmap <silent> <C-c><C-p> <Plug>(coc-diagnostic-prev-error)

  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Remap for rename current word
  nmap <C-c><C-r> <Plug>(coc-rename)
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
  " Use K for show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
  let g:coc_filetype_map  = {
  \ 'htmldjango': 'html',
  \ }
  " Add `:Format` command to format current buffer.
  command! -nargs=0 Format :call CocAction('format')

  " for coc-snippets
  let g:coc_snippet_next = '<TAB>'
'''

hook_post_source = '''
  " for coc-actions
  " Remap for do codeAction of selected region
  function! s:cocActionsOpenFromSelected(type) abort
    execute 'CocCommand actions.open ' . a:type
  endfunction
  xmap <silent> <leader>a :<C-u>execute 'CocCommand actions.open ' . visualmode()<CR>
  nmap <silent> <leader>a :<C-u>set operatorfunc=<SID>cocActionsOpenFromSelected<CR>g@
'''


[[plugins]]
repo = 'liuchengxu/vista.vim'
depends = ['coc.nvim']
hook_add = '''
  let g:vista_default_executive = 'coc'
  let g:vista_echo_cursor_strategy='floating_win'
  let g:vista#renderer#enable_icon = 1
  let g:vista_highlight_whole_line = 1
  let g:vista#renderer#icons = {
\   "function": "\uf794",
\   "variable": "\uf71b",
\  }
  nmap <silent> <C-f><C-v> :<C-u>Vista<CR>
  " nmap <silent> <C-f><C-s> :<C-u>Vista finder<CR>
'''

hook_post_source = '''
if v:vim_did_enter
  call vista#RunForNearestMethodOrFunction()
endif
'''

[[plugins]]
repo = 'Shougo/deol.nvim'

# [[plugins]]
# repo = '/usr/local/opt/fzf'

# [[plugins]]
# repo = 'junegunn/fzf.vim'
# depends = 'fzf'
# hook_add = '''

# let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }
# let s:options = {'options': ['--layout=reverse', '--info=inline']}

# " nmap <silent> <C-g> :<C-u>Rg<CR>

# command! -bang -nargs=* Rg
#   \ call fzf#vim#grep(
#   \  "rg --hidden --column --line-number --no-heading --color=always --smart-case --glob '!.git/*' -- ".shellescape(<q-args>), 1,
#   \  extend(fzf#vim#with_preview(), {'options': '--delimiter : --nth 4..'}), <bang>0)
# command! -bang -nargs=? -complete=dir FilesWithPreview
#   \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

# " nmap <silent> <C-f><C-f> :<C-u>FilesWithPreview<CR>
# " noremap <silent><C-f><C-r> :<C-u>FZFMru<CR>
# command! FZFMru call fzf#run(extend(extend({
#     \ 'sink':    'e',
#     \ 'source':  v:oldfiles,
#     \ 'options': '-m -x +s',
#     \ 'down': '40%',
#     \ }, g:fzf_layout), s:options))
# '''

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_post_source = '''
  nmap <silent> ge :<C-u>Fern . -reveal=%<CR>
  nmap <silent> <Leader>ge :<C-u>Fern . -drawer -reveal=% -toggle<CR>
'''
[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'
depends = ['fern.vim']

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends = ['fern.vim', 'nerdfont.vim']
hook_add = '''
  let g:fern#renderer = "nerdfont"
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_post_source = '''
    noremap <silent><C-s><C-s> :<C-u>Gina status<CR>
    call gina#custom#command#alias('branch', 'br')
    call gina#custom#command#option('br', '-v', 'v')
    call gina#custom#command#option(
      \ '/\%(log\|reflog\)',
      \ '--opener', 'vsplit'
      \)
    call gina#custom#command#option(
      \ 'log', '--group', 'log-viewer'
      \)
    call gina#custom#command#option(
      \ 'reflog', '--group', 'reflog-viewer'
      \)
    call gina#custom#command#option(
      \ 'diff', '--group', 'diff'
      \)
    call gina#custom#command#option(
      \ 'commit', '-v|--verbose'
      \)
    call gina#custom#mapping#nmap(
      \ 'status', '<C-c><C-c>',
      \ ':<C-u>Gina commit<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
    call gina#custom#mapping#nmap(
      \ 'commit', '<C-s><C-s>',
      \ ':<C-u>Gina status<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
    call gina#custom#execute(
      \ '/\%(status\|branch\|ls\|grep\|changes\|tag\)',
      \ 'setlocal winfixheight',
      \)
    call gina#custom#mapping#nmap(
      \ 'status', 'dj',
      \ 'j:<C-u>call gina#action#call("diff:preview:top")<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
    call gina#custom#mapping#nmap(
      \ 'status', 'dk',
      \ 'k:<C-u>call gina#action#call("diff:preview:top")<CR>',
      \ {'noremap': 1, 'silent': 1}
      \)
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
autocmd FileType TelescopePrompt let b:lexima_disabled = 1
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  autocmd user indentline doautocmd indentline syntax
'''

[[plugins]]
repo =  'editorconfig/editorconfig-vim'
hook_add = '''
  let g:EditorConfig_verbose=1
'''

[[plugins]]
repo = 'vim-scripts/camelcasemotion'
hook_add = '''
  map w <Plug>CamelCaseMotion_w
  map b <Plug>CamelCaseMotion_b
  map e <Plug>CamelCaseMotion_e
  sunmap w
  sunmap b
  sunmap e
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo='mbbill/undotree'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo='janko/vim-test'
hook_add = '''
  nmap <silent> <C-t> :TestNearest<CR>
  let g:test#strategy = "asyncrun"
'''
depends = ['asyncrun.vim']

[[plugins]]
repo='skywind3000/asyncrun.vim'
hook_add = '''
  let g:asyncrun_open = 14
  " autocmd User AsyncRunStop copen | $ | wincmd p
'''

[[plugins]]
repo = 'lambdalisue/edita.vim'

[[plugins]]
repo = 'lambdalisue/readablefold.vim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_add = '''
set foldmethod=expr
set foldexpr=nvim_treesitter#foldexpr()
set foldlevel=99
'''
hook_post_source = '''
lua <<EOF
  require('nvim-treesitter.configs').setup {
      highlight = {
          enable = true,                    -- false will disable the whole extension
          disable = {  },                   -- list of language that will be disabled
      },
      incremental_selection = {
          enable = true,
          disable = {  },
          keymaps = {                       -- mappings for incremental selection (visual mappings)
            init_selection = 'gnn',         -- maps in normal mode to init the node/scope selection
            node_incremental = "grn",       -- increment to the upper named parent
            scope_incremental = "grc",      -- increment to the upper scope (as defined in locals.scm)
            node_decremental = "grm",       -- decrement to the previous node
          }
      },
      -- ensure_installed = 'all' -- one of 'all', 'language', or a list of languages
  }
EOF
'''

# highlight default link TSPunctDelimiter Delimiter
# highlight default link TSPunctBracket Delimiter
# highlight default link TSPunctSpecial Delimiter

# highlight default link TSConstant Constant
# highlight default link TSConstBuiltin Special
# highlight default link TSConstMacro Define
# highlight default link TSString String
# highlight default link TSStringRegex String
# highlight default link TSStringEscape SpecialChar
# highlight default link TSCharacter Character
# highlight default link TSNumber Number
# highlight default link TSBoolean Boolean
# highlight default link TSFloat Float

# highlight default link TSFunction Function
# highlight default link TSFuncBuiltin Special
# highlight default link TSFuncMacro Macro
# highlight default link TSParameter Identifier
# highlight default link TSParameterReference TSParameter
# highlight default link TSMethod Function
# highlight default link TSField Identifier
# highlight default link TSProperty Identifier
# highlight default link TSConstructor Special
# highlight default link TSAnnotation PreProc
# highlight default link TSAttribute PreProc
# highlight default link TSNamespace Include

# highlight default link TSConditional Conditional
# highlight default link TSRepeat Repeat
# highlight default link TSLabel Label
# highlight default link TSOperator Operator
# highlight default link TSKeyword Keyword
# highlight default link TSKeywordFunction Keyword
# highlight default link TSKeywordOperator TSOperator
# highlight default link TSException Exception

# highlight default link TSType Type
# highlight default link TSTypeBuiltin Type
# highlight default link TSInclude Include

# highlight default link TSVariableBuiltin Special

# highlight default link TSText TSNone
# highlight default TSStrong term=bold cterm=bold gui=bold
# highlight default TSEmphasis term=italic cterm=italic gui=italic
# highlight default TSUnderline term=underline cterm=underline gui=underline
# highlight default link TSTitle Title
# highlight default link TSLiteral String
# highlight default link TSURI Underlined

# highlight default link TSTag Label
# highlight default link tstagdelimiter delimiter
# '''

[[plugins]]
repo = 'vigoux/treesitter-context.nvim'
depends = ['nvim-treesitter']

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {}
autocmd BufNewFile,BufRead *.rs  let g:quickrun_config.rust = {"exec" : "cargo run"}
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
hook_post_source = '''
  nmap <C-f><C-f> <cmd>HopWord<CR>
'''

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-lua/telescope.nvim'
depends = ['popup.nvim', 'plenary.nvim']
hook_add = '''
  nmap <silent> <C-f><C-l> <cmd>Telescope find_files find_command=rg,--smart-case,--files,--hidden,--follow theme=get_ivy<CR>
  nmap <silent> <C-g> <cmd>Telescope live_grep vimgrep_arguments=rg,--hidden,--column,--line-number,--no-heading,--smart-case theme=get_ivy only_sort_text=true<CR>
  nmap <silent> <C-g> <cmd>Telescope live_grep theme=get_ivy<CR>
  nmap <silent> <C-f><C-r> <cmd>Telescope oldfiles theme=get_ivy<CR>
  nmap <silent> <C-f><C-s> <cmd>Telescope treesitter theme=get_ivy<CR>
'''
hook_post_source = '''
lua << EOF
local actions = require('telescope.actions')

require('telescope').setup{
  defaults = {
    winblend = 35,
    mappings = {
      i = {
        ["<c-x>"] = false,
        ["<c-s>"] = actions.select_vertical,
        ["<Tab>"] = actions.toggle_selection,
        ['<C-q>'] = actions.send_selected_to_qflist,
      }
    }
  },
}
EOF
'''

[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
depends = ['telescope.nvim']
build = 'make'
# hook_post_source = '''
# lua << EOF
# require('telescope').load_extension('fzf')
# EOF
# '''

# [[plugins]]
# repo = 'kkoomen/vim-doge'

[[plugins]]
repo = 'pyonk/campfire.vim'

[[plugins]]
repo = 'delphinus/telescope-memo.nvim'
depends = ['telescope.nvim']
hook_add = '''
  nmap <silent> <C-m><C-l> <cmd>:Telescope memo list<CR>
'''

[[plugins]]
repo = 'folke/trouble.nvim'
depends = ['telescope.nvim', 'coc.nvim']
hook_add = '''
au User CocDiagnosticChange lua require'trouble'.refresh({auto = true, provider = "loclist"})
nmap <silent> <C-c><C-d> :<C-u>LspTroubleToggle loclist<CR>
'''

[[plugins]]
repo = 'folke/todo-comments.nvim'
hook_post_source = '''
lua << EOF
require("todo-comments").setup {
  -- your configuration comes here
  -- or leave it empty to use the default settings
}
EOF
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'folke/twilight.nvim'
depends = ['nvim-treesitter']

[[plugins]]
repo = 'pwntester/octo.nvim'
depends = ['telescope.nvim']
